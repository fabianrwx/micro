package client

import (
	"bytes"
	"crypto/tls"
	"encoding/json"
	"fmt"
	"io"
	"log/slog"
	"net/http"
	"time"
)

// Client defines the HTTP client structure
type Client struct {
	baseURL    string
	httpClient *http.Client
	headers    map[string]string
}

// Option defines a functional option for configuring the client
type Option func(*Client)

// NewClient creates a new client with the provided options
func NewClient(opts ...Option) *Client {

	transport := &http.Transport{}

	client := &Client{
		httpClient: &http.Client{
			Timeout:   5 * time.Second,
			Transport: transport,
		},
		headers: make(map[string]string),
	}

	for _, opt := range opts {
		opt(client)
	}
	
	return client
}

func (c *Client) SetToken(token string) {
	c.headers["Authorization"] = fmt.Sprintf("Bearer %s", token)
}

func (c *Client) SetTlsConfig(tlsConfig *tls.Config) {
	if transport, ok := c.httpClient.Transport.(*http.Transport); ok {
		transport.TLSClientConfig = tlsConfig
	}
}

func (c *Client) SetBaseURL(baseURL string) {
	c.baseURL = baseURL
}

func (c *Client) GetBaseURL() string {
	return c.baseURL
}

// WithHTTPClient sets the HTTP client for the client
func WithHTTPClient(httpClient *http.Client) Option {
	return func(c *Client) {
		c.httpClient = httpClient
	}
}

// WithBaseURL sets the base URL for the client
func WithBaseURL(baseURL string) Option {
	return func(c *Client) {
		c.baseURL = baseURL
	}
}

// WithTimeout sets the HTTP client timeout
func WithTimeout(timeout time.Duration) Option {
	return func(c *Client) {
		c.httpClient.Timeout = timeout
	}
}

// WithHeaders adds default headers to the client
func WithHeaders(headers map[string]string) Option {
	return func(c *Client) {
		for k, v := range headers {
			c.headers[k] = v
		}
	}
}

// WithTLSConfig sets custom TLS configuration for the client
func WithTLSConfig(tlsConfig *tls.Config) Option {
	return func(c *Client) {
		if transport, ok := c.httpClient.Transport.(*http.Transport); ok {
			transport.TLSClientConfig = tlsConfig
		}
	}
}

// DoRequest performs an HTTP request
func (c *Client) DoRequest(method, path string, body interface{}, headers map[string]string) (*http.Response, error) {
	url := fmt.Sprintf("%s%s", c.baseURL, path)
	var requestBody io.Reader
	if body != nil {
		data, err := json.Marshal(body)
		if err != nil {
			slog.Error("failed to marshal request body", "error", err)
			return nil, err
		}
		requestBody = bytes.NewReader(data)
	}

	req, err := http.NewRequest(method, url, requestBody)
	if err != nil {
		slog.Error("failed to create request", "error", err)
		return nil, err
	}

	// Add default headers
	for k, v := range c.headers {
		req.Header.Set(k, v)
	}
	// Add request-specific headers
	for k, v := range headers {
		req.Header.Set(k, v)
	}

	if body != nil {
		req.Header.Set("Content-Type", "application/json")
	}

	return c.httpClient.Do(req)
}

// ParseResponse parses an HTTP response into the given interface
func (c *Client) ParseResponse(resp *http.Response, out interface{}) error {
	defer resp.Body.Close()
	{{ raw "if resp.StatusCode < 200 || resp.StatusCode >= 300 {" }}
		return fmt.Errorf("HTTP error: %s", resp.Status)
	}
	return json.NewDecoder(resp.Body).Decode(out)
}

// Convenience methods for HTTP methods

func (c *Client) Get(path string, headers map[string]string) (*http.Response, error) {
	return c.DoRequest(http.MethodGet, path, nil, headers)
}

func (c *Client) Post(path string, body interface{}, headers map[string]string) (*http.Response, error) {
	return c.DoRequest(http.MethodPost, path, body, headers)
}

func (c *Client) Put(path string, body interface{}, headers map[string]string) (*http.Response, error) {
	return c.DoRequest(http.MethodPut, path, body, headers)
}

func (c *Client) Delete(path string, headers map[string]string) (*http.Response, error) {
	return c.DoRequest(http.MethodDelete, path, nil, headers)
}
