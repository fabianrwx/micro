package client

import (
	"bytes"
	"context"
	"crypto/tls"
	"encoding/json"
	"fmt"
	"io"
	"log/slog"
	"net/http"
	"strings"
	"sync"
	"time"
	"{{.ModuleName}}/config"
)

// Client defines the HTTP client structure
type Client struct {
	baseURL    string
	httpClient *http.Client
	headers    map[string]string
}

// Option defines a functional option for configuring the client
type Option func(*Client)

// NewClient creates a new client with the provided options
func NewClient(conf *config.Config, opts ...Option) Client {

	transport := &http.Transport{}

	client := Client{
		baseURL: conf.Authentication.Host,
		httpClient: &http.Client{
			Timeout:   5 * time.Second,
			Transport: transport,
		},
		headers: make(map[string]string),
	}

	for _, opt := range opts {
		opt(&client)
	}

	return client
}

func (c *Client) SetToken(token string) {
	c.headers["Authorization"] = fmt.Sprintf("Bearer %s", token)
}

func (c *Client) SetTlsConfig(tlsConfig *tls.Config) {
	if transport, ok := c.httpClient.Transport.(*http.Transport); ok {
		transport.TLSClientConfig = tlsConfig
	}
}

func (c *Client) SetBaseURL(baseURL string) {
	c.baseURL = baseURL
}

func (c *Client) GetBaseURL() string {
	return c.baseURL
}

// WithHTTPClient sets the HTTP client for the client
func WithHTTPClient(httpClient *http.Client) Option {
	return func(c *Client) {
		c.httpClient = httpClient
	}
}

// WithBaseURL sets the base URL for the client
func WithBaseURL(baseURL string) Option {
	return func(c *Client) {
		c.baseURL = baseURL
	}
}

// WithTimeout sets the HTTP client timeout
func WithTimeout(timeout time.Duration) Option {
	return func(c *Client) {
		c.httpClient.Timeout = timeout
	}
}

// WithHeaders adds default headers to the client
func WithHeaders(headers map[string]string) Option {
	return func(c *Client) {
		for k, v := range headers {
			c.headers[k] = v
		}
	}
}

// WithTLSConfig sets custom TLS configuration for the client
func WithTLSConfig(tlsConfig *tls.Config) Option {
	return func(c *Client) {
		if transport, ok := c.httpClient.Transport.(*http.Transport); ok {
			transport.TLSClientConfig = tlsConfig
		}
	}
}
func (c *Client) DoRequest(method, path string, body interface{}, headers map[string]string) (*http.Response, error) {
	var requestBody io.Reader

	if body != nil {
		data, err := json.Marshal(body)
		if err != nil {
			slog.Error("failed to marshal request body", "error", err)
			return nil, err
		}
		requestBody = bytes.NewReader(data)
	}

	// Create a context with a timeout (adjust as needed)
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// Create a wait group to wait for all requests to complete
	var wg sync.WaitGroup

	urls := strings.Split(c.baseURL, ",")

	wg.Add(len(urls)) 

	// Create a channel to receive the first successful response
	respChan := make(chan *http.Response)
	errChan := make(chan error)

	// Send requests to all servers concurrently
	for _, baseURL := range urls {
		go func(baseURL string) {
			defer wg.Done()

			url := fmt.Sprintf("%s%s", baseURL, path)

			req, err := http.NewRequestWithContext(ctx, method, url, requestBody)
			if err != nil {
				slog.Error("failed to create request", "error", err)
				{{ raw "errChan <- err" }}
				return
			}

			req.Header.Set("Content-Type", "application/json")

			resp, err := c.httpClient.Do(req)
			if err != nil {
				slog.Warn("request failed", "error", err, "baseURL", baseURL)
				{{ raw "errChan <- err" }}
				return
			}

			// Send the successful response to the channel
			select {
			{{ raw "case respChan <- resp:" }}
				// First successful response sent
			default:
				// Another response was already sent, close this one
				resp.Body.Close()
			}
		}(baseURL)
	}

	// Wait for the first successful response or all errors
	var resp *http.Response
	var err error

	select {
	{{ raw "case resp = <-respChan:" }}
		// Received a successful response
	{{ raw "case err = <-errChan:" }}
		// Received an error
	{{ raw "case <-ctx.Done():" }}
		// Context timed out
		err = ctx.Err()
	}
   v
	// Cancel the context to stop any remaining requests
	cancel()

	// Wait for all goroutines to finish
	wg.Wait()nmbgm  nmgbngb nbbbbnvvcvmcvmnvnmnnvbm kjfgvb z z

	return resp, err
}

// ParseResponse parses an HTTP response into the given interface
func (c *Client) ParseResponse(resp *http.Response, out interface{}) error {
	defer resp.Body.Close()
	{{ raw "if resp.StatusCode < 200 || resp.StatusCode >= 300 {" }}
		return fmt.Errorf("HTTP error: %s", resp.Status)
	}
	return json.NewDecoder(resp.Body).Decode(out)
}

// Convenience methods for HTTP methods

func (c *Client) Get(path string, headers map[string]string) (*http.Response, error) {
	return c.DoRequest(http.MethodGet, path, nil, headers)
}

func (c *Client) Post(path string, body interface{}, headers map[string]string) (*http.Response, error) {
	return c.DoRequest(http.MethodPost, path, body, headers)
}

func (c *Client) Put(path string, body interface{}, headers map[string]string) (*http.Response, error) {
	return c.DoRequest(http.MethodPut, path, body, headers)
}

func (c *Client) Delete(path string, headers map[string]string) (*http.Response, error) {
	return c.DoRequest(http.MethodDelete, path, nil, headers)
}
