package api

import (
	"time"

	"{{ .ModuleName }}/node/config"
	"{{ .ModuleName }}/node/internal/ports"
	"{{ .ModuleName }}/node/pkg/client"
	"{{ .ModuleName }}/node/pkg/jwt"
)

type Adapter struct {
	repo   ports.Database
	client client.Client
	conf   *config.Config
	jwt    *jwt.JWTGenerator
}

type Options func(*Adapter) error

func NewAdapter(repo ports.Database, conf *config.Config, jwt *jwt.JWTGenerator, opts ...Options) (*Adapter, error) {
	var baseURL string

	switch conf.Service.UseTls {
	case true:
		baseURL = "https://localhost:8080/api/v1"
	default:
		baseURL = "http://localhost:8080/api/v1"
	}

	client := client.NewClient(
		conf,
		client.WithBaseURL(baseURL),
		client.WithTimeout(5*time.Second),
		client.WithTLSConfig(nil),
	)

	adapter := &Adapter{
		repo:   repo,
		client: client,
		conf:   conf,
	}

	for _, opt := range opts {
		if err := opt(adapter); err != nil {
			return nil, err
		}
	}

	return adapter, nil
}

func WithJWTGenerator(jwt *jwt.JWTGenerator) Options {
	return func(a *Adapter) error {
		a.jwt = jwt
		return nil
	}
}

func WithClient(client client.Client) Options {
	return func(a *Adapter) error {
		a.client = client
		return nil
	}
}

func WithConf(conf *config.Config) Options {
	return func(a *Adapter) error {
		a.conf = conf
		return nil
	}
}

func WithRepository(repo ports.Database) Options {
	return func(a *Adapter) error {
		a.repo = repo
		return nil
	}
}
