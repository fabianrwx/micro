package middlewares

import (
	"net/http"

	"{{ .ModuleName }}/pkg/jwt"
)

// RoutePermissions maps routes to required permissions
var RoutePermissions = map[string][]jwt.Permission{
	"/home": {jwt.ViewApplication},
}

// AuthorizationMiddleware enforces permission-based access control
func AuthorizationMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// Extract JWT claims (assuming this is already handled elsewhere)
		claims, ok := r.Context().Value(jwt.AuthorizationPayloadKey).(*jwt.Payload)
		if !ok || claims == nil {
			http.Error(w, "unauthorized", http.StatusUnauthorized)
			return
		}

		// Get the required permissions for the current route
		requiredPermissions, ok := RoutePermissions[r.URL.Path]
		if !ok {
			// If no permissions are defined, allow access (or handle default behavior)
			next.ServeHTTP(w, r)
			return
		}

		// Check if the user has any of the required permissions
		if !jwt.HasAnyOfPermissions(claims.Roles, requiredPermissions...) {
			http.Error(w, "forbidden: insufficient permissions", http.StatusForbidden)
			return
		}

		// Proceed to the next middleware/handler
		next.ServeHTTP(w, r)
	})
}
